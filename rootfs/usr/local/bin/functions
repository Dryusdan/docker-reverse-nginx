#!/bin/bash

## Variables
CSI="\033["
CEND="${CSI}0m"
CRED="${CSI}1;31m"
CGREEN="${CSI}1;32m"
CYELLOW="${CSI}1;33m"
CBLUE="${CSI}1;34m"


## Functions
f_log() {
    LOG_TYPE=$1
    LOG_MESSAGE=$2

    case "${LOG_TYPE}" in
    "INF")
        echo -e "${CBLUE}=INF= $(date +%Y/%m/%d-%H:%M:%S) ${LOG_MESSAGE}${CEND}"
    ;;
    "SUC")
        echo -e "${CGREEN}=SUC= $(date +%Y/%m/%d-%H:%M:%S) ${LOG_MESSAGE}${CEND}"
    ;;
    "WRN")
        echo -e "${CYELLOW}=WRN= $(date +%Y/%m/%d-%H:%M:%S) ${LOG_MESSAGE}${CEND}"
    ;;
    "ERR")
        echo -e "${CRED}=ERR= $(date +%Y/%m/%d-%H:%M:%S) ${LOG_MESSAGE}${CEND}"
    ;;
    esac
}

f_gen_sites_enabled() {
    if [ "${FRONTEND_SSL}" == "enable" ]; then
        template_sites=/templates/sites-enabled_ssl.tmpl
    else
        template_sites=/templates/sites-enabled.tmpl
    fi
    for domain_name in ${FRONTEND_DOMAIN}; do
        sed -e 's|<frontend_domain>|'${domain_name}'|' ${template_sites} > /nginx/sites-enabled/${domain_name}.conf
        if [[ "${FRONTEND_HSTS}" == "false" ]] || [[ "${FRONTEND_HSTS}" == "disable" ]]; then
            sed -i -e "s|include /nginx/conf.d/hsts.conf|#include /nginx/conf.d/hsts.conf|g" /nginx/sites-enabled/${domain_name}.conf
        fi
        if [[ "${FRONTEND_HEADERS}" == "false" ]] || [[ "${FRONTEND_HEADERS}" == "disable" ]]; then
            sed -i -e "s|include /nginx/conf.d/headers.conf|#include /nginx/conf.d/headers.conf|g" /nginx/sites-enabled/${domain_name}.conf
        fi
        if [[ "${FRONTEND_OCSP}" == "false" ]] || [[ "${FRONTEND_OCSP}" == "disable" ]]; then
            sed -i -e "s|include /nginx/conf.d/ocsp.conf|#include /nginx/conf.d/ocsp.conf|g" /nginx/sites-enabled/${domain_name}.conf
        fi
        if [[ "${FRONTEND_CT}" == "false" ]] || [[ "${FRONTEND_CT}" == "disable" ]]; then
            sed -i -e "s|ssl_ct_static_scts|#ssl_ct_static_scts|g" /nginx/sites-enabled/${domain_name}.conf
            sed -i -e "s|include /nginx/conf.d/ct.conf|#include /nginx/conf.d/ct.conf|g" /nginx/sites-enabled/${domain_name}.conf
        fi
    done
}

f_gen_location() {
    container_name=$1
    for domain_name in ${FRONTEND_DOMAIN}; do
        if [ ! -d /nginx/path.d/${domain_name} ]; then
            mkdir -p /nginx/path.d/${domain_name}
        fi

        if [ "${FRONTEND_PATH}" == "/" ]; then
            path_file=/nginx/path.d/${domain_name}/base.conf
            auth_file=/nginx/auth/${domain_name}/base.auth
        else
            path_file=/nginx/path.d/${domain_name}/${FRONTEND_PATH}.conf
            auth_file=/nginx/auth/${domain_name}/${FRONTEND_PATH}.auth
        fi
        if [ ! -e ${path_file} ]; then
            if [ "${FRONTEND_AUTH}" != "" ]; then
                mkdir -p /nginx/auth/${domain_name}
                sed -e 's|<frontend_domain_max_body_size>|'${FRONTEND_MAX_BODY_SIZE}'|' \
                    -e 's|<backend_addr>|'${container_name}'|' \
                    -e 's|<backend_port>|'${BACKEND_PORT}'|' \
                    -e 's|<frontend_domain>|'${domain_name}'|' \
                    -e 's|<frontend_path>|'${FRONTEND_PATH}'|' \
                    -e 's|<auth_file>|'${auth_file}'|' /templates/path_auth.tmpl > ${path_file}
                echo "${FRONTEND_AUTH}" > ${auth_file}
            else
                sed -e 's|<frontend_domain_max_body_size>|'${FRONTEND_MAX_BODY_SIZE}'|' \
                    -e 's|<backend_addr>|'${container_name}'|' \
                    -e 's|<backend_port>|'${BACKEND_PORT}'|' \
                    -e 's|<frontend_path>|'${FRONTEND_PATH}'|' /templates/path.tmpl > ${path_file}
            fi
        fi
    done
}

f_gen_certs() {
    container_name=$1
    for domain_name in ${FRONTEND_DOMAIN}; do
        if [ "${FRONTEND_SSL}" == "enable" ]; then
            CERTFILE=/nginx/ssl/certificates/${domain_name}.cert.pem
            KEYFILE=/nginx/ssl/certificates/${domain_name}.key
            CHAINFILE=/nginx/ssl/certificates/${domain_name}.chain.pem
            FULLCHAINFILE=/nginx/ssl/certificates/${domain_name}.crt
            if [ ! -e ${CERTFILE} ] || [ ! -e ${KEYFILE} ] || [ ! -e ${CHAINFILE} ] || [ ! -e ${FULLCHAINFILE} ]; then
                mkdir -p /nginx/www/${domain_name}
                /usr/local/bin/lego -a -m ${EMAIL} -d ${domain_name} --path /nginx/ssl --http :8080 --tls :8443 -k ${FRONTEND_SSLTYPE} run
                if [ $? == 0 ]; then
                    head -$(grep -n "END CERTIFICATE" ${FULLCHAINFILE} | head -1 | cut -d: -f1) ${FULLCHAINFILE} > ${CERTFILE}
                    tail -$(($(wc -l ${FULLCHAINFILE} | awk '{print $1}')-$(grep -n "END CERTIFICATE" ${FULLCHAINFILE} | head -1 | cut -d: -f1))) ${FULLCHAINFILE} > ${CHAINFILE}
                    chown -R ${UID}:${GID} /nginx/ssl/
                fi
                [[ $? == 0 ]] && f_log INF "New Certificate for ${domain_name} generated" || f_log ERR "New Certificate for ${domain_name} not generated"
            fi
        fi
    done
}

f_gen_scts() {
    container_name=$1
    if [ "${FRONTEND_SSL}" == "true" ] && [ "${FRONTEND_CT}" == "true" ]; then
        mkdir -p /nginx/ssl/timestamps/${FRONTEND_DOMAIN}
        FULLCHAINFILE=/nginx/ssl/certificates/${FRONTEND_DOMAIN}.crt
        SCTFILE=nginx/ssl/timestamps/${FRONTEND_DOMAIN}/fullchain.sct
        if [ ! -f ${SCTFILE} ]; then
            ct-submit ct.googleapis.com/pilot <${FULLCHAINFILE}>${SCTFILE}
        fi
    fi
}

f_make_conf() {
    FRONTEND_DOMAIN=mydomain.local
    FRONTEND_MAX_BODY_SIZE=200M
    FRONTEND_SSLTYPE=ec384
    BACKEND_PORT=8080
    FRONTEND_PATH="/"
    FRONTEND_SSL=disable
    FRONTEND_AUTH=""
    FRONTEND_HSTS=enable
    FRONTEND_OCSP=disable
    FRONTEND_CT=disable

    container_name=$1
    IFS=$'\n' 
    if [ "${CONTAINER_LABELS}" != "" ]; then
        for label in ${CONTAINER_LABELS}; do
            case "$(echo ${label} | awk '{print $1}')" in
                "reverse.frontend.domain")
                    FRONTEND_DOMAIN=""
                    FRONTEND_DOMAIN=("$(echo ${label} | awk '{print $2}' | sed 's/,/ /g')")
                ;;
                "reverse.frontend.path")
                    FRONTEND_PATH="$(echo ${label} | awk '{print $2}')"
                ;;
                "reverse.frontend.auth")
                    FRONTEND_AUTH="$(echo ${label} | awk '{print $2}')"
                ;;
                "reverse.frontend.ssltype")
                    FRONTEND_SSLTYPE="$(echo ${label} | awk '{print $2}')"
                ;;
                "reverse.frontend.domain_max_body_size")
                    FRONTEND_MAX_BODY_SIZE="$(echo ${label} | awk '{print $2}')"
                ;;
                "reverse.frontend.ssl")
                    FRONTEND_SSL="$(echo ${label} | awk '{print $2}')"
                ;;
                "reverse.backend.port")
                    BACKEND_PORT="$(echo ${label} | awk '{print $2}')"
                ;;
                "reverse.frontend.hsts")
                    FRONTEND_HSTS="$(echo ${label} | awk '{print $2}')"
                ;;
                "reverse.frontend.ocsp")
                    FRONTEND_OCSP="$(echo ${label} | awk '{print $2}')"
                ;;
                "reverse.frontend.ct")
                    FRONTEND_CT="$(echo ${label} | awk '{print $2}')"
                ;;
            esac
        done
        f_log INF "Generate files for ${FRONTEND_DOMAIN}, with path=${FRONTEND_PATH}, auth=${FRONTEND_AUTH}, ssl_type=${FRONTEND_SSLTYPE}, ssl=${FRONTEND_SSL} and port=${BACKEND_PORT}"
        f_gen_location ${container_name}
        f_gen_sites_enabled
        f_gen_certs ${container_name}
        f_gen_scts ${container_name}
    fi
}


f_remove_conf() {
    FRONTEND_DOMAIN=mydomain.local
    FRONTEND_PATH="/"
    FRONTEND_SSL=disable
    FRONTEND_AUTH=""

    container_name=$1
    IFS=$'\n' 
    if [ "${CONTAINER_LABELS}" != "" ]; then
        for label in ${CONTAINER_LABELS}; do
            case "$(echo ${label} | awk '{print $1}')" in
                "reverse.frontend.domain")
                    FRONTEND_DOMAIN=""
                    FRONTEND_DOMAIN=("$(echo ${label} | awk '{print $2}' | sed 's/,/ /g')")
                ;;
                "reverse.frontend.path")
                    FRONTEND_PATH="$(echo ${label} | awk '{print $2}')"
                ;;

            esac
        done
    fi

    for domain_name in ${FRONTEND_DOMAIN}; do
        rm -f /nginx/sites-enabled/${domain_name}.conf

        if [ "${FRONTEND_PATH}" == "/" ]; then
            rm -f /nginx/path.d/${domain_name}/base.conf
            if [ -e /nginx/auth/${domain_name}/base.auth ]; then
                rm -f /nginx/auth/${domain_name}/base.auth
            fi
        else
            rm -f /nginx/path.d/${domain_name}/${FRONTEND_PATH}.conf
            if [ -e /nginx/auth/${domain_name}/${FRONTEND_PATH}.auth ]; then
                rm -f /nginx/auth/${domain_name}/${FRONTEND_PATH}.auth
            fi
        fi
    done
}


f_service_create() {
    CONTAINER_LABELS=$(curl --unix-socket /var/run/docker.sock http://localhost/services/${1} 2> /dev/null | jq '.Spec.Labels' | grep -E "reverse\." | sed 's|.*"\(.*\)": "\(.*\)".*$|\1 \2|')
    if [ "${CONTAINER_LABELS}" == "" ]; then
        CONTAINER_LABELS=$(curl --unix-socket /var/run/docker.sock http://localhost/services/${1} 2> /dev/null | jq '.Spec.TaskTemplate.ContainerSpec.Labels' | grep -E "reverse\." | sed 's|.*"\(.*\)": "\(.*\)".*$|\1 \2|')
    fi
    if [ "${CONTAINER_LABELS}" != "" ]; then
        f_make_conf ${1}
        f_log INF "Service $1 created"
        nginx -s reload
    fi    
}

f_service_remove() {
    CONTAINER_LABELS=$(curl --unix-socket /var/run/docker.sock http://localhost/services/${1} 2> /dev/null | jq '.Spec.Labels' | grep -E "reverse\." | sed 's|.*"\(.*\)": "\(.*\)".*$|\1 \2|')
    if [ "${CONTAINER_LABELS}" == "" ]; then
        CONTAINER_LABELS=$(curl --unix-socket /var/run/docker.sock http://localhost/services/${1} 2> /dev/null | jq '.Spec.TaskTemplate.ContainerSpec.Labels' | grep -E "reverse\." | sed 's|.*"\(.*\)": "\(.*\)".*$|\1 \2|')
    fi
    if [ "${CONTAINER_LABELS}" != "" ]; then
        f_remove_conf ${1}
        f_log INF "Service $1 removed"
        nginx -s reload
    fi    
}

f_container_start() {
    CONTAINER_LABELS=$(curl --unix-socket /var/run/docker.sock http://localhost/containers/${1}/json 2> /dev/null | jq '.Config.Labels' | grep -E "reverse\." | sed 's|.*"\(.*\)": "\(.*\)".*$|\1 \2|')
    if [ "${CONTAINER_LABELS}" != "" ]; then
        f_make_conf ${1}
        f_log INF "Container $1 created"
        nginx -s reload
    fi    
}

f_container_die() {
    CONTAINER_LABELS=$(curl --unix-socket /var/run/docker.sock http://localhost/containers/${1}/json 2> /dev/null | jq '.Config.Labels' | grep -E "reverse\." | sed 's|.*"\(.*\)": "\(.*\)".*$|\1 \2|')
    if [ "${CONTAINER_LABELS}" != "" ]; then
        f_remove_conf ${1}
        f_log INF "Container $1 removed"
        nginx -s reload
    fi
}

f_analyze_line() {
    TYPE=$(echo $line | jq '.Type' | sed 's/"//g')
    ACTION=$(echo $line | jq '.Action' | sed 's/"//g')
    if [[ "${SWARM}" == "enable" ]] || [[ "${SWARM}" == "true" ]]; then
        SERVICE_NAME=$(echo $line | jq '.Actor.Attributes.name' | sed 's/"//g')
        if [ "${TYPE}" == "service" ]; then
            if [ "${ACTION}" == "create" ]; then
                f_service_create ${SERVICE_NAME}
            elif [ "${ACTION}" == "remove" ]; then
                f_service_remove ${SERVICE_NAME}
            fi
        fi
    else
        CONTAINER_NAME=$(echo $line | jq '.Actor.Attributes.name' | sed 's/"//g')
        if [ "${TYPE}" == "container" ]; then
            if [ "${ACTION}" == "start" ]; then
                f_container_start ${CONTAINER_NAME}
            elif [ "${ACTION}" == "die" ]; then
                f_container_die ${CONTAINER_NAME}
            fi
        fi
    fi
}